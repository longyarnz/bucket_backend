{"version":3,"sources":["../../middleware/tokenParser.js"],"names":["req","res","next","token","headers","verify","err","decoded","status","json","message","userId","id"],"mappings":";;;;;;AAKA;;;;AACA;;;;AANA;;;;;kBAOe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,QAAQH,IAAII,OAAJ,CAAY,eAAZ,CAAd;AACA,yBAAIC,MAAJ,CAAWF,KAAX,oBAA8B,UAACG,GAAD,EAAMC,OAAN,EAAkB;AAC9C,QAAID,GAAJ,EAAS;AACPL,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,cAAX,EAArB;AACD,KAFD,MAGK;AACHV,UAAIW,MAAJ,GAAaJ,QAAQK,EAArB;AACAV;AACD;AACF,GARD;AASD,C","file":"tokenParser.js","sourcesContent":["/**\r\n * @fileoverview tokenParser is a middleware that extracts token bearer from the headers of a request. \r\n * The token is parsed and piped to the next callback.\r\n * @exports tokenParser\r\n */\r\nimport JWT from 'jsonwebtoken';\r\nimport { SERVER_KEY } from '../api/auth';\r\nexport default (req, res, next) => {\r\n  const token = req.headers['authorization'];\r\n  JWT.verify(token, SERVER_KEY, (err, decoded) => {\r\n    if (err) {\r\n      res.status(401).json({ message: 'Invalid User' });\r\n    }\r\n    else {\r\n      req.userId = decoded.id;\r\n      next();\r\n    }\r\n  });\r\n};"]}