{"version":3,"sources":["../../service/bucketService.js"],"names":["getUserBucketlists","userId","search","start","stop","find","created_by","name","$regex","skip","limit","bucketlists","error","createBucketlist","id","select","sort","lastBucketlist","Array","isArray","create","bucketlist","updateBucketlistById","bucketId","update","$set","findOneAndUpdate","_id","new","deleteBucketlistById","deleteOne","remove","ok","getBucketlistById","findOne","getBucketItems","items","getBucketItemById","itemId","item","toString","updateBucketItemById","a","b","date_created","deleteBucketItemById","$pull","some","addItemToBucket","length","$push"],"mappings":"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","file":"bucketService.js","sourcesContent":["/**\r\n * @fileoverview Methods for querying data from the bucketlists collection.\r\n * @exports { getUserBucketlists, createBucketlist, getBucketlistById, updateBucketlistById, deleteBucketlistById, addItemToBucket, getBucketItems, getBucketItemById, updateBucketItemById, deleteBucketItemById }\r\n */\r\nimport BucketListModel from '../models/bucketlist';\r\nimport logger from '../middleware/logger';\r\n\r\n/**\r\n * @description Gets all bucketlists that belongs to the user.\r\n * @param {string} userId - The ID of the logged-in user.\r\n * @return {array} bucketlists - An array of bucketlists.\r\n */\r\nconst getUserBucketlists = async (userId, search, start, stop) => {\r\n  try {\r\n    const bucketlists = await BucketListModel.find({created_by: userId, name: {$regex: search}}).skip(start).limit(stop);\r\n    return bucketlists;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Creates a bucketlist for the user.\r\n * @param {{name: string, string}} bucketlist - An object containing ID of logged-in user and the name of the new bucketlist.\r\n * @return {array} An array of bucketlists.\r\n */\r\nconst createBucketlist = async (name, userId) => {\r\n  try {\r\n    let id = 0;\r\n    let lastBucketlist = await BucketListModel.find().select('id').sort('-date_created').limit(1);\r\n    if(!Array.isArray(lastBucketlist)) id = lastBucketlist.id;\r\n    const bucketlist = await BucketListModel.create({ id: ++id, name, created_by: userId });\r\n    return bucketlist;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Updates a bucketlist for the user.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @param {object} update - An object to update the bucketlist.\r\n * @return {object} A bucketlist object.\r\n */\r\nconst updateBucketlistById = async (bucketId, update) => {\r\n  try {\r\n    update = { $set: update };\r\n    const bucketlist = await BucketListModel.findOneAndUpdate({ _id: bucketId }, update, { new: true });\r\n    return bucketlist;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Deletes a bucketlist for the user.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @return {boolean} A boolean value.\r\n */\r\nconst deleteBucketlistById = async (bucketId) => {\r\n  try {\r\n    const remove = await BucketListModel.deleteOne({ _id: bucketId });\r\n    return remove.ok === 1;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Gets a bucketlist for the user by the ID.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @param {string} update - A unique user ID.\r\n * @return {object} A bucketlists object.\r\n */\r\nconst getBucketlistById = async (bucketId, userId) => {\r\n  try {\r\n    const bucketlist = await BucketListModel.findOne({ _id: bucketId, created_by: userId });\r\n    return bucketlist;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Gets all items in a bucketlist.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @return {array} An array of bucketlists.\r\n */\r\nconst getBucketItems = async (bucketId) => {\r\n  try {\r\n    let { items } = await BucketListModel.findOne({ _id: bucketId }).select('items');\r\n    return items;\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Gets a single item in a bucketlist.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @param {string} itemId - A unique item ID.\r\n * @return {array} An array of bucketlists.\r\n */\r\nconst getBucketItemById = async (bucketId, itemId) => {\r\n  try {\r\n    const { items } = await BucketListModel.findOne({ _id: bucketId }).select('items');\r\n    return items.find(item => item._id.toString() === itemId);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Updates a bucketlist item for the user.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @param {string} itemId - A unique item ID.\r\n * @param {object} update - An object to update the bucketlist.\r\n * @return {array} An array of bucketlists.\r\n */\r\nconst updateBucketItemById = async (bucketId, itemId, update) => {\r\n  try {\r\n    const bucketlist = await BucketListModel.findOneAndUpdate({ _id: bucketId, 'items._id': itemId }, {\r\n      $set: { 'items.$': update }\r\n    }, {new: true});\r\n    return bucketlist.items.sort((a, b) => b.date_created - a.date_created)[0];\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Deletes a bucketlist item for the user.\r\n * @param {string} bucketId - A unique bucketlist ID.\r\n * @param {string} itemId - A unique item ID.\r\n * @return {boolean} true or false.\r\n */\r\nconst deleteBucketItemById = async (bucketId, itemId) => {\r\n  try {\r\n    const bucketlist = await BucketListModel.findOneAndUpdate({_id: bucketId}, {$pull: {items: {_id: itemId}}}, {new: true});\r\n    return !bucketlist.items.some(item => item._id.toString() === itemId);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\n/**\r\n * @description Adds an item to a bucketlist.\r\n * @param {{name: string, string}} bucketlist - An object containing ID of logged-in user and the name of the new bucketlist.\r\n * @return {object} An item object.\r\n */\r\nconst addItemToBucket = async (bucketId, item) => {\r\n  try {\r\n    let { items } = await BucketListModel.findOne({ _id: bucketId }).select('items');\r\n    item.id = ++items.length;\r\n    item = { $push: { items: item } };\r\n    const bucketlist = await BucketListModel.findOneAndUpdate({ _id: bucketId }, item, { new: true });\r\n    return bucketlist.items.sort((a, b) => b.date_created - a.date_created)[0];\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n  }\r\n};\r\n\r\nexport { getUserBucketlists, createBucketlist, getBucketlistById, updateBucketlistById, deleteBucketlistById, addItemToBucket, getBucketItems, getBucketItemById, updateBucketItemById, deleteBucketItemById };"]}