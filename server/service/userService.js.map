{"version":3,"sources":["../../service/userService.js"],"names":["authenticateUser","credentials","username","password","findOne","user","isValid","id","_id","error","createUser","create","isCreated"],"mappings":";;;;;;;;;AAIA;;;;AACA;;;;;;2cALA;;;;;;AAOA;;;;;AAKA,IAAMA;AAAA,qEAAmB,iBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,oBAFa,GAEUD,WAFV,CAEbC,QAFa,EAEHC,QAFG,GAEUF,WAFV,CAEHE,QAFG;AAAA;AAAA,mBAGF,eAAUC,OAAV,CAAkB,EAAEF,kBAAF,EAAYC,kBAAZ,EAAlB,CAHE;;AAAA;AAGfE,gBAHe;AAAA,6CAIdA,OAAO,EAAEC,SAAS,IAAX,EAAiBC,IAAIF,KAAKG,GAA1B,EAAP,GAAyC,EAAEF,SAAS,KAAX,EAAkBC,IAAI,IAAtB,EAJ3B;;AAAA;AAAA;AAAA;;AAOrB,6BAAOE,KAAP;;AAPqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAYA;;;;;AAKA,IAAMC;AAAA,sEAAa,kBAAOT,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,oBAFO,GAEgBD,WAFhB,CAEPC,QAFO,EAEGC,QAFH,GAEgBF,WAFhB,CAEGE,QAFH;AAAA;AAAA,mBAGI,eAAUQ,MAAV,CAAiB,EAAET,kBAAF,EAAYC,kBAAZ,EAAjB,CAHJ;;AAAA;AAGTE,gBAHS;AAAA,8CAIR,QAAOA,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,GAA2B,EAAEO,WAAW,IAAb,EAAmBL,IAAIF,KAAKG,GAA5B,EAA3B,GAA+D,EAAEI,WAAW,KAAb,EAAoBL,IAAI,IAAxB,EAJvD;;AAAA;AAAA;AAAA;;AAOf,6BAAOE,KAAP;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;QAYSC,U,GAAAA,U;QAAYV,gB,GAAAA,gB","file":"userService.js","sourcesContent":["/**\r\n * @fileoverview Methods for querying data from the users collection.\r\n * @exports { createUser, authenticateUser }\r\n */\r\nimport UserModel from '../models/user';\r\nimport logger from '../middleware/logger';\r\n\r\n/**\r\n * @description Authenticates a user given a username and a password\r\n * @param {object} credentials - username and password object\r\n * @return {object} isValid and id\r\n */\r\nconst authenticateUser = async (credentials) => {\r\n  try {\r\n    const { username, password } = credentials;\r\n    const user = await UserModel.findOne({ username, password });\r\n    return user ? { isValid: true, id: user._id } : { isValid: false, id: null };\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n};\r\n\r\n/**\r\n * @description Creates a user given a username and a password\r\n * @param {object} credentials - username and password object\r\n * @return {object} isValid and id\r\n */\r\nconst createUser = async (credentials) => {\r\n  try {\r\n    const { username, password } = credentials;\r\n    const user = await UserModel.create({ username, password });\r\n    return typeof user === 'object' ? { isCreated: true, id: user._id } : { isCreated: false, id: null };\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n};\r\n\r\nexport { createUser, authenticateUser };"]}