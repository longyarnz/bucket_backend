{"version":3,"sources":["../../api/bucketlists.js"],"names":["router","Router","get","req","res","userId","search","start","stop","bucketlists","status","json","error","post","name","body","bucketlist","console","log","bucketId","params","put","delete","removed","itemId"],"mappings":"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","file":"bucketlists.js","sourcesContent":["/**\r\n * @fileoverview Bucketlists Routes and API endpoints.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport tokenParser from '../middleware/tokenParser';\r\nimport logger from '../middleware/logger';\r\nimport paginator from '../middleware/paginator';\r\nimport validateBucket from '../middleware/validateBucket';\r\nimport validateItem from '../middleware/validateItem';\r\nimport { \r\n  getUserBucketlists, createBucketlist, getBucketlistById, \r\n  updateBucketlistById, deleteBucketlistById, addItemToBucket, \r\n  getBucketItems, getBucketItemById, updateBucketItemById, deleteBucketItemById\r\n} from '../service/bucketService';\r\nconst router = express.Router();\r\n\r\n/**\r\n * @description Gets all user bucketlists\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @param {middleware} paginator - Extracts query parameters\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/', tokenParser, paginator, async (req, res) => {\r\n  try {\r\n    const {userId, search, start, stop} = req;\r\n    const bucketlists = await getUserBucketlists(userId, search, start, stop);\r\n    res.status(200).json(bucketlists);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Creates a single bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @param {middleware} validateBucket - Validates input data\r\n * @returns {object} A newly created bucketlist object\r\n */\r\nrouter.post('/', tokenParser, validateBucket, async (req, res) => {\r\n  try {\r\n    const { userId, body: { name } } = req;\r\n    const bucketlist = await createBucketlist(name, userId);\r\n    // eslint-disable-next-line\r\n    console.log(bucketlist, 1);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets a single user bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.get('/:bucketId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { userId, params: { bucketId } } = req;\r\n    const bucketlist = await getBucketlistById(bucketId, userId);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Updates a single user bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.put('/:bucketId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { body, params: { bucketId } } = req;\r\n    const bucketlist = await updateBucketlistById(bucketId, body);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Deletes a single user bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.delete('/:bucketId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: { bucketId } } = req;\r\n    const removed = await deleteBucketlistById(bucketId);\r\n    res.status(200).json(removed);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets all items in a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.get('/:bucketId/items/', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: {bucketId} } = req;\r\n    const bucketlist = await getBucketItems(bucketId);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets an item in a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.get('/:bucketId/items/:itemId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: {bucketId, itemId} } = req;\r\n    const bucketlist = await getBucketItemById(bucketId, itemId);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Updates an item in a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @param {middleware} validateItem - Validates input data\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.put('/:bucketId/items/:itemId', tokenParser, validateItem, async (req, res) => {\r\n  try {\r\n    const { body, params: {bucketId, itemId} } = req;\r\n    const bucketlist = await updateBucketItemById(bucketId, itemId, body);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Deletes an item in a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.delete('/:bucketId/items/:itemId', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: {bucketId, itemId} } = req;\r\n    const bucketlist = await deleteBucketItemById(bucketId, itemId);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Gets all items in a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.get('/:bucketId/items/', tokenParser, async (req, res) => {\r\n  try {\r\n    const { params: {bucketId} } = req;\r\n    const bucketlist = await getBucketItems(bucketId);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\n/**\r\n * @description Adds a single item to a bucketlist\r\n * @param {middleware} tokenParser - Extracts userId from token\r\n * @param {middleware} validateBucket - Validates input data\r\n * @returns {object} A bucketlist object\r\n */\r\nrouter.post('/:bucketId/items/', tokenParser, validateBucket, async (req, res) => {\r\n  try {\r\n    const { body, params: {bucketId} } = req;\r\n    const bucketlist = await addItemToBucket(bucketId, body);\r\n    res.status(200).json(bucketlist);\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    \r\n  }\r\n});\r\n\r\nexport default router;"]}