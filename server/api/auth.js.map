{"version":3,"sources":["../../api/auth.js"],"names":["router","Router","SERVER_KEY","v4","post","req","res","body","username","password","user","isCreated","redirect","status","json","error","isValid","sign","id","err","token","Error","message","text","get","header"],"mappings":";;;;;;;AAIA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;2cAXA;;;;;;AAaA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;AACA,IAAIC,aAAa,eAAKC,EAAL,EAAjB;;AAEA;;;;;;AAMAH,OAAOI,IAAP,CAAY,SAAZ;AAAA,qEAAsC,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEHD,IAAIE,IAFD,EAE1BC,QAF0B,aAE1BA,QAF0B,EAEhBC,QAFgB,aAEhBA,QAFgB;AAAA;AAAA,mBAGf,6BAAW,EAAED,kBAAF,EAAYC,kBAAZ,EAAX,CAHe;;AAAA;AAG5BC,gBAH4B;;;AAKlC,gBAAIA,KAAKC,SAAT,EAAoB;AAClBL,kBAAIM,QAAJ,CAAa,GAAb,EAAkB,oBAAlB;AACD,aAFD,MAIK;AACHN,kBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD;AAXiC;AAAA;;AAAA;AAAA;AAAA;;AAclC,6BAAOC,KAAP;AACAT,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAfkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AAmBA;;;;;;AAMAd,OAAOI,IAAP,CAAY,QAAZ;AAAA,sEAAqC,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACJD,IAAIE,IADA,EAC3BC,QAD2B,cAC3BA,QAD2B,EACjBC,QADiB,cACjBA,QADiB;AAAA;AAAA;AAAA,mBAId,mCAAiB,EAAED,kBAAF,EAAYC,kBAAZ,EAAjB,CAJc;;AAAA;AAI3BC,gBAJ2B;;;AAMjC,gBAAIA,KAAKM,OAAT,EAAkB;AAChB;;;AAGA,qCAAIC,IAAJ,CAAS,EAAEC,IAAIR,KAAKQ,EAAX,EAAT,EAA0BhB,UAA1B,EAAsC,UAACiB,GAAD,EAAMC,KAAN,EAAgB;AACpD,oBAAID,GAAJ,EAAS,MAAME,MAAM,iCAAN,CAAN;;AAET,oBAAMC,UAAU;AACdC,wBAAM,wBADQ;AAEdH;AAFc,iBAAhB;;AAKA;;;AAGAd,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACD,eAZD;AAaD,aAjBD,MAmBK;AACGA,qBADH,GACa;AACdC,sBAAM,sCADQ;AAEdH,uBAAO;AAFO,eADb;;;AAMHd,kBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACD;AAhCgC;AAAA;;AAAA;AAAA;AAAA;;AAoCjC,6BAAOP,KAAP;AACAT,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAAIQ,OAAzB;;AArCiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAyCA;;;;;AAKAtB,OAAOwB,GAAP,CAAW,SAAX,yBAAmC,UAACnB,GAAD,EAAMC,GAAN,EAAc;AAC/C,UAKOJ,UALP,gBAAa,eAAKC,EAAL,EAAb;AACAG,MAAImB,MAAJ,CAAW,eAAX,IAA8B,EAA9B;AACAnB,MAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB;AACD,CAJD;;QAMSZ,U,GAAAA,U;kBAEMF,M","file":"auth.js","sourcesContent":["/**\r\n * @fileoverview Authentication Route for server connection.\r\n * @exports router\r\n */\r\nimport express from 'express';\r\nimport 'babel-polyfill';\r\nimport JWT from 'jsonwebtoken';\r\nimport UUID from 'uuid';\r\nimport { authenticateUser, createUser } from '../service/userService';\r\nimport validateInput from '../middleware/validateInput';\r\nimport logger from '../middleware/logger';\r\nimport tokenParser from '../middleware/tokenParser';\r\n\r\nconst router = express.Router();\r\nlet SERVER_KEY = UUID.v4();\r\n\r\n/**\r\n * @description Registers a user into the Server\r\n * @param {string} route An API route to login\r\n * @param {middleware} validateInput - Callback for post method to routes\r\n * @returns {Response} JSON\r\n */\r\nrouter.post('/create', validateInput, async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    const user = await createUser({ username, password });\r\n\r\n    if (user.isCreated) {\r\n      res.redirect(307, '/api/v1/auth/login');\r\n    }\r\n\r\n    else {\r\n      res.status(401).json();\r\n    }\r\n  }\r\n  catch (err) {\r\n    logger.error(err);\r\n    res.status(401).json();\r\n  }\r\n});\r\n\r\n/**\r\n * @description Logs a user into the Server\r\n * @param {string} route An API route to login\r\n * @param {middleware} validateInput - Callback for post method to routes\r\n * @returns {Response} JSON\r\n */\r\nrouter.post('/login', validateInput, async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const user = await authenticateUser({ username, password });\r\n\r\n    if (user.isValid) {\r\n      /**\r\n       * @description Creates JWT token from the username and password\r\n       */\r\n      JWT.sign({ id: user.id }, SERVER_KEY, (err, token) => {\r\n        if (err) throw Error('Server is currently unavailable');\r\n\r\n        const message = {\r\n          text: 'User log-in successful',\r\n          token\r\n        };\r\n\r\n        /**\r\n         * @description Returns user token\r\n         */\r\n        res.status(200).json(message);\r\n      });\r\n    }\r\n\r\n    else {\r\n      const message = {\r\n        text: 'Username and password does not match',\r\n        token: false\r\n      };\r\n\r\n      res.status(200).json(message);\r\n    }\r\n  }\r\n\r\n  catch (err) {\r\n    logger.error(err);\r\n    res.status(401).json(err.message);\r\n  }\r\n});\r\n\r\n/**\r\n * @description Log a user out of the Server\r\n * @param {string} route An API route to login\r\n * @returns {Response} JSON\r\n */\r\nrouter.get('/logout', tokenParser, (req, res) => {\r\n  SERVER_KEY = UUID.v4();\r\n  res.header['authorization'] = '';\r\n  res.status(200).json(true);\r\n});\r\n\r\nexport { SERVER_KEY };\r\n\r\nexport default router;"]}